{
  // Place your exodus workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "React FC component with interface": {
    "scope": "typescriptreact",
    "prefix": "tssi",
    "body": [
      "import { FC } from 'react';",
      "",
      "interface I${TM_FILENAME_BASE}$1Props {",
      "  prop: any;",
      "}",
      "",
      "const ${TM_FILENAME_BASE}$1: FC<I${TM_FILENAME_BASE}$1Props> = ({ prop }) => {",
      "  return <>${TM_FILENAME_BASE}$1</>;",
      "};",
      "",
      "export default ${TM_FILENAME_BASE}$1;",
      ""
    ],
    "description": "React FC component with interface"
  },
  "React FC component": {
    "scope": "typescriptreact",
    "prefix": "tss",
    "body": [
      "import { FC } from 'react';",
      "",
      "const ${TM_FILENAME_BASE}$1: FC = () => {",
      "  return <>${TM_FILENAME_BASE}$1</>;",
      "};",
      "",
      "export default ${TM_FILENAME_BASE}$1;",
      ""
    ],
    "description": "React FC component"
  },
  "React forward component with interface": {
    "scope": "typescriptreact",
    "prefix": "tssfri",
    "body": [
      "import { ForwardRefRenderFunction, forwardRef, useCallback, useImperativeHandle } from 'react';",
      "",
      "interface I${TM_FILENAME_BASE}$1Handles {",
      "  handle: () => void;",
      "}",
      "",
      "interface I${TM_FILENAME_BASE}$1Props {",
      "  prop: any;",
      "}",
      "",
      "const ForwardComponent: ForwardRefRenderFunction<I${TM_FILENAME_BASE}$1Handles, I${TM_FILENAME_BASE}$1Props> = ({ prop }, ref) => {",
      "  // #Handles",
      "  const handle = useCallback(() => {",
      "    console.log('handled');",
      "  }, []);",
      "",
      "  //ref",
      "  useImperativeHandle(ref, () => ({",
      "    handle",
      "  }));",
      "",
      "  return <>${TM_FILENAME_BASE}$1 Forwad</>;",
      "};",
      "",
      "const ${TM_FILENAME_BASE}$1 = forwardRef(ForwardComponent);",
      "",
      "export default ${TM_FILENAME_BASE}$1;"
    ],
    "description": "React forward component with interface"
  },
  "React forward component": {
    "scope": "typescriptreact",
    "prefix": "tssfr",
    "body": [
      "import { ForwardRefRenderFunction, forwardRef, useCallback, useImperativeHandle } from 'react';",
      "",
      "export interface I${TM_FILENAME_BASE}$1Handles {",
      "  handle: () => void;",
      "}",
      "",
      "const ForwardComponent: ForwardRefRenderFunction<I${TM_FILENAME_BASE}$1Handles> = (_props, ref) => {",
      "  // #Handles",
      "  const handle = useCallback(() => {",
      "    console.log('handled');",
      "  }, []);",
      "",
      "  //ref",
      "  useImperativeHandle(ref, () => ({",
      "    handle",
      "  }));",
      "",
      "  return <>${TM_FILENAME_BASE}$1 Forwad</>;",
      "};",
      "",
      "const ${TM_FILENAME_BASE}$1 = forwardRef(ForwardComponent);",
      "",
      "export default ${TM_FILENAME_BASE}$1;"
    ],
    "description": "React forward component"
  }
}
